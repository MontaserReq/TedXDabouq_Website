generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  failedLoginAttempts Int     @default(0)
  lockoutUntil      DateTime?

  Speakers Speakers[]

  Sponser Sponser[]
}

model Account {
  id                String     @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?    @db.Text
  access_token      String?    @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?    @db.Text
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerficationToken{
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken{
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken{
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}

model Speakers {
  id          String @id @default(cuid())
  FName       String
  LName       String
  Imgpath     String
  SocialLink  String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  admin       User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}


model Sponser {
  id          String @id @default(cuid())
  Name        String
  Imgpath     String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  admin       User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}
